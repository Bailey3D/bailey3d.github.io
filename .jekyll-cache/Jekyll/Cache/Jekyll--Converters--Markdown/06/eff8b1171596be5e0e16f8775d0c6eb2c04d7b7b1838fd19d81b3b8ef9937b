I"∏<p>Asset Library is a series of pipeline tools I‚Äôve created for my own personal projects.</p>

<p>The main goals of these are to maximize the efficiency of bringing asset types from many DCC Packages to the final game.</p>

<p>It‚Äôs all a somewhat personal solution to my own project needs, and is constantly evolving, but since it‚Äôs starting to morph into a tangible set of tools I thought writing a post on it could be interesting.</p>

<hr />

<h3 id="material-export-substance-designer">Material Export (Substance Designer)</h3>

<p><img src="https://www.dropbox.com/s/3pht3ym28hzwvlb/material_editor.png?raw=1" alt="Image" class="center-image" /></p>

<p>This is a tool used to automatically export a material and all variants from Substance Designer to the Asset Library. When the exporter is ran, all textures are re-exported, and the .material file is updated with any edited parameters.</p>

<h3 id="material-refresh-unreal-engine">Material Refresh (Unreal Engine)</h3>

<p><img src="https://www.dropbox.com/s/srujsjv4kfttc8g/designer_to_unreal.png?raw=1" alt="Image" class="center-image" /></p>

<p>One of the nicest parts of the material pipeline is the ‚ÄúImport to Unreal Engine‚Äù sub-tool. Whevever this is ran, the current material is exported from Substance Designer, and reimported to Unreal with all of the new textures.</p>

<p>This means I no longer have to nagivate to the updated material and manually reimport all dependent textures. Instead it‚Äôs a single button press.</p>

<hr />

<h3 id="auto-importexport">Auto Import/Export</h3>

<p>For each asset type, I have a series of tools for the respective DCC Package, for either importing or exporting the asset types automatically.</p>

<p>Example of the auto-export tool for Substance Designer</p>

<p><img src="https://www.dropbox.com/s/tzy21d3emm1lsfs/unreal_import.png?raw=1" alt="Image" class="center-image" /></p>

<p>The asset importer for Unreal Engine</p>

<p><img src="https://www.dropbox.com/s/3pht3ym28hzwvlb/material_editor.png?dl=0" alt="Image" class="center-image" />
<img src="https://www.dropbox.com/s/3pht3ym28hzwvlb/material_editor.png?dl=0" alt="Image" class="center-image" /></p>

<hr />

<h3 id="asset-standardization">Asset Standardization</h3>

<p>Possibly the most important part of the whole process is having standardization in how assets and files are named, and the folder structures.
I‚Äôve chosen to implement new file types for each of the major assets (.material, .geometry, .shader), which stores metadata such as where the final binary assets are stored (relative to the asset library), and various parameters for the asset type.</p>

<p>Below you can see an example of the folder structure for a geometry asset. It‚Äôs been stored in a base folder with the name of the asset, and contains child folders for all materials, textures and geometry files (fbx)</p>

<p><img src="https://www.dropbox.com/s/yaawqybzx3tb696/geometry_example.png?raw=1" alt="Image" class="center-image" /></p>
:ET