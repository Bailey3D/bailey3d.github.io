I"¼<p>Asset Library is a series of pipeline tools and standardizations Iâ€™ve implemented into my own personal game projects, with a few main goals, all focused on maximizing the efficiency of taking content from various DCC Packages to the final Game.</p>

<p>This is a somewhat personal solution to asset management for my own work, and is constantly evolving. But since itâ€™s starting to morph into a more tangible pipeline and set of tools in itself I thought a post on it could be interesting.</p>

<p>Below Iâ€™ll list a series of the processes and tools that Iâ€™ve used to make the asset library pipeline as seamless as possible.</p>

<hr />

<h3 id="materials">Materials</h3>

<p>One of the most useful things about the Asset Library has been the serialization and deserialization of materials.</p>

<p>Iâ€™m using a .json format saved to .material files to store all of the data and metadata on all materials used, you can see below an example of a .material file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    {
    "metadata": {
        "filepath_history": [
            "m_surface_marble_01.material",
            "content\\common\\materials\\surface_marble\\m_surface_marble_01.material"
        ],
        "instance": "01",
        "name": "Surface_Marble",
        "shader": "SHD_Surface_Standard",
        "variant": ""
    },
        "parameters": {
        "AlbedoMap": "t_surface_marble_01_da.tga",
        "NormalMap": "t_surface_marble_01_n.tga",
        "SurfaceMap": "t_surface_marble_01_s.tga",
        "TriplanarBlendHardness": 0.5,
        "bTriPlanar": true
    },
    "textures": {
        "DA": "t_surface_marble_01_da",
        "N": "t_surface_marble_01_n",
        "S": "t_surface_marble_01_s"
    }
}
</code></pre></div></div>

<h3 id="asset-types--asset-serialization">Asset Types / Asset Serialization</h3>

<p>One of the first things I found I needed for this process were certain metadata type files, for all of the main asset types used.
Rather than creating bespoke file formats (such as .uasset), Iâ€™m instead using a .json file as the base of all my asset metadata.</p>

<p>Iâ€™m currently using 4 main types of asset metadata  files:</p>

<ul>
  <li>.material, this stores the data on all parameters needed for a final surface (including textures)</li>
  <li>.geometry, this is typically used for geometric asset types and stores data on which .FBX asset to target and the asset library .material files that it contains.</li>
  <li>.shader,</li>
</ul>

<h3 id="asset-structure-standardization">Asset Structure Standardization</h3>

<p>One of the most important (and possibly least interesting) goals of the Asset Library, was creating logical naming conventions and folder structures for all of my assets.</p>

<h3 id="automation--importing--exporting">Automation &amp; Importing / Exporting</h3>

<p>â€¦</p>

<h3 id="inter-package-dcc-operability">Inter-package DCC Operability</h3>

<p>â€¦</p>
:ET